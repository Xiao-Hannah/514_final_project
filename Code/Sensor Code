#include <Arduino.h>
#include <BLEDevice.h>
#include <BLEServer.h>
#include <BLEUtils.h>
#include <BLE2902.h>
#include "HX711.h"
#include <Preferences.h>

//----------------------- HX711 and Calibration Related -----------------------
const int LOADCELL_DOUT_PIN = D9;   // DT pin
const int LOADCELL_SCK_PIN = D8;    // SCK pin

const float KNOWN_WEIGHT_GRAMS = 228.0;  // Known weight used for calibration (in grams)
const float KNOWN_WEIGHT_LBS = KNOWN_WEIGHT_GRAMS / 453.592;

const int AVERAGE_SIZE = 5;          // Size of the moving average array
float weight_history[AVERAGE_SIZE];
int history_index = 0;
bool history_filled = false;

Preferences preferences;
HX711 scale;
long zero_offset = 0;
float calibration_factor = 0;
float correction_offset = 0.0;
float NOISE_THRESHOLD = 5.0;
float STABILITY_THRESHOLD = 10.0;
bool fastResponseMode = false;

//----------------------- BLE Related Definitions -----------------------
// Service and characteristic UUIDs consistent with the motor board
static BLEUUID serviceUUID("f1d9563f-f861-4053-aff1-f071905fa5b9");
static BLEUUID charUUID("efa2a95e-224e-4da2-82a3-42306fa7b44e");

BLEServer *pServer = nullptr;
BLECharacteristic *pWeightCharacteristic = nullptr;
bool deviceConnected = false;
bool oldDeviceConnected = false;
unsigned long lastNotifyTime = 0;
const unsigned long minNotifyInterval = 500; // Minimum time between notifications (ms)

// Function to calculate the moving average
float calculateMovingAverage(float newValue) {
  weight_history[history_index] = newValue;
  history_index = (history_index + 1) % AVERAGE_SIZE;
  if (history_index == 0 && !history_filled) {
    history_filled = true;
  }
  float sum = 0;
  int count = (history_filled) ? AVERAGE_SIZE : history_index;
  for (int i = 0; i < count; i++) {
    sum += weight_history[i];
  }
  return (count > 0) ? sum / count : 0;
}

// Stability detection function
bool isStable() {
  if (!history_filled && history_index < 3) return false;
  int count = fastResponseMode ? min(3, (history_filled ? AVERAGE_SIZE : history_index))
                               : (history_filled ? AVERAGE_SIZE : history_index);
  float sum = 0;
  for (int i = 0; i < count; i++) {
    int idx = fastResponseMode ? (history_index - 1 - i + AVERAGE_SIZE) % AVERAGE_SIZE : i;
    sum += weight_history[idx];
  }
  float mean = sum / count;
  if (abs(mean) < NOISE_THRESHOLD * 0.5) {
    return true;
  }
  float variance = 0;
  for (int i = 0; i < count; i++) {
    int idx = fastResponseMode ? (history_index - 1 - i + AVERAGE_SIZE) % AVERAGE_SIZE : i;
    float diff = weight_history[idx] - mean;
    variance += diff * diff;
  }
  variance /= count;
  return variance < STABILITY_THRESHOLD;
}

// Calibration function
void calibrateScale() {
  Serial.println("\nStarting calibration process...");
  Serial.println("Waiting for sensor to stabilize...");
  delay(3000);
  
  Serial.println("Make sure there is nothing on the scale, then send 'Y' when ready...");
  while (true) {
    if (Serial.available()) {
      char c = Serial.read();
      while (Serial.available()) Serial.read();
      if (c == 'Y' || c == 'y') break;
      else Serial.println("Please send 'Y' to indicate readiness.");
    }
    delay(100);
  }
  
  Serial.println("Measuring zero offset...");
  long sum = 0;
  for (int i = 0; i < 30; i++) {
    sum += scale.read();
    delay(300);
  }
  zero_offset = sum / 30;
  Serial.print("Zero offset: ");
  Serial.println(zero_offset);
  
  Serial.print("Please place the iPhone 12 Pro Max (");
  Serial.print(KNOWN_WEIGHT_GRAMS);
  Serial.println("g) in the center of the scale, then send 'Y'...");
  while (true) {
    if (Serial.available()) {
      char c = Serial.read();
      while (Serial.available()) Serial.read();
      if (c == 'Y' || c == 'y') break;
      else Serial.println("Please send 'Y' to indicate readiness.");
    }
    delay(100);
  }
  
  Serial.println("Measuring reading with weight placed...");
  sum = 0;
  for (int i = 0; i < 30; i++) {
    sum += scale.read();
    delay(300);
  }
  long center_reading = sum / 30;
  Serial.print("Center reading: ");
  Serial.println(center_reading);
  
  long raw_difference = zero_offset - center_reading;
  calibration_factor = (float)raw_difference / KNOWN_WEIGHT_GRAMS;
  Serial.print("Calibration factor: ");
  Serial.println(calibration_factor);
  
  Serial.println("\nPlease remove the object, ensure the scale is empty, then send 'Y'...");
  while (true) {
    if (Serial.available()) {
      char c = Serial.read();
      while (Serial.available()) Serial.read();
      if (c == 'Y' || c == 'y') break;
      else Serial.println("Please send 'Y' to indicate readiness.");
    }
    delay(100);
  }
  
  Serial.println("Performing final zero calibration...");
  sum = 0;
  for (int i = 0; i < 30; i++) {
    sum += scale.read();
    delay(100);
  }
  long final_zero = sum / 30;
  float empty_weight = (zero_offset - final_zero) / calibration_factor;
  Serial.print("No-load test weight: ");
  Serial.print(empty_weight);
  Serial.println(" g");
  correction_offset = empty_weight;
  Serial.print("Correction offset: ");
  Serial.print(correction_offset);
  Serial.println(" g");
  
  preferences.putLong("zero_offset", zero_offset);
  preferences.putFloat("cal_factor", calibration_factor);
  preferences.putFloat("correction", correction_offset);
  preferences.putFloat("noise_thresh", NOISE_THRESHOLD);
  preferences.putFloat("stab_thresh", STABILITY_THRESHOLD);
  
  Serial.println("Calibration data saved to flash");
  
  history_filled = false;
  history_index = 0;
  for (int i = 0; i < AVERAGE_SIZE; i++) {
    weight_history[i] = 0.0;
  }
}

// Custom BLE Server callback to handle connection status changes
class MyServerCallbacks: public BLEServerCallbacks {
  void onConnect(BLEServer* pServer) {
    deviceConnected = true;
    Serial.println("BLE client connected!");
  }
  
  void onDisconnect(BLEServer* pServer) {
    deviceConnected = false;
    Serial.println("BLE client disconnected!");
  }
};

// Custom BLE Characteristic callback
class WeightCharacteristicCallbacks: public BLECharacteristicCallbacks {
  void onRead(BLECharacteristic *pCharacteristic) {
    Serial.println("Weight characteristic read by client");
  }
};

void setup() {
  Serial.begin(115200);

  delay(2000);  // Give serial more time to initialize
  Serial.println("=== HX711 Load Sensor & BLE Server Starting ===");
  
  // Initialize HX711 scale
  Serial.print("Initializing HX711 scale...");
  scale.begin(LOADCELL_DOUT_PIN, LOADCELL_SCK_PIN);
  if (!scale.is_ready()) {
    Serial.println(" FAILED! Check wiring.");
    while (1) {
      delay(1000);
      if (scale.is_ready()) {
        Serial.println("HX711 now ready, continuing...");
        break;
      }
    }
  } else {
    Serial.println(" OK!");
  }
  
  // Initialize weight history array
  for (int i = 0; i < AVERAGE_SIZE; i++) {
    weight_history[i] = 0.0;
  }
  
  // Load calibration data from preferences
  preferences.begin("hx711", false);
  zero_offset = preferences.getLong("zero_offset", 0);
  calibration_factor = preferences.getFloat("cal_factor", 0);
  correction_offset = preferences.getFloat("correction", 0);
  NOISE_THRESHOLD = preferences.getFloat("noise_thresh", 5.0);
  STABILITY_THRESHOLD = preferences.getFloat("stab_thresh", 10.0);
  
  bool has_calibration = (zero_offset != 0) && (calibration_factor != 0);
  if (has_calibration) {
    Serial.println("Calibration data loaded:");
    Serial.print("  Zero offset: "); Serial.println(zero_offset);
    Serial.print("  Calibration factor: "); Serial.println(calibration_factor);
    Serial.print("  Correction offset: "); Serial.println(correction_offset);
    Serial.println("If recalibration is needed, send the 'C' command.");
  } else {
    Serial.println("Calibration data not found, starting calibration.");
    calibrateScale();
  }
  
  Serial.println("Available commands: C (recalibrate), T (tare), F (toggle fast response), S/s (increase/decrease stability threshold), N/n (increase/decrease noise threshold)");
  
  // Initialize BLE Server with improved settings
  Serial.println("Initializing BLE server...");
  BLEDevice::init("WeightSensor");
  
  // Create the BLE Server
  pServer = BLEDevice::createServer();
  pServer->setCallbacks(new MyServerCallbacks());
  
  // Create the BLE Service
  BLEService *pService = pServer->createService(serviceUUID);
  
  // Create BLE Characteristic for weight data
  pWeightCharacteristic = pService->createCharacteristic(
      charUUID,
      BLECharacteristic::PROPERTY_READ | 
      BLECharacteristic::PROPERTY_NOTIFY
  );
  
  // Add a descriptor and callback
  pWeightCharacteristic->addDescriptor(new BLE2902());
  pWeightCharacteristic->setCallbacks(new WeightCharacteristicCallbacks());
  pWeightCharacteristic->setValue("0");
  
  // Start the service
  pService->start();
  
  // Setup advertising with improved visibility
  BLEAdvertising *pAdvertising = BLEDevice::getAdvertising();
  pAdvertising->addServiceUUID(serviceUUID);
  pAdvertising->setScanResponse(true);
  pAdvertising->setMinPreferred(0x06);  // functions that help with iPhone connections issue
  pAdvertising->setMinPreferred(0x12);
  
  // Start advertising
  Serial.println("Starting BLE advertising...");
  BLEDevice::startAdvertising();
  Serial.println("BLE sensor device is now advertising!");
  Serial.println("Waiting for motor controller to connect...");
}

void loop() {
  // Handle serial commands
  if (Serial.available()) {
    char cmd = Serial.read();
    while (Serial.available()) Serial.read();
    if (cmd == 'C' || cmd == 'c') {
      calibrateScale();
    }
    else if (cmd == 'T' || cmd == 't') {
      Serial.println("Performing tare operation...");
      long sum = 0;
      for (int i = 0; i < 30; i++) {
        sum += scale.read();
        delay(100);
      }
      zero_offset = sum / 30;
      correction_offset = 0.0;
      history_filled = false;
      history_index = 0;
      for (int i = 0; i < AVERAGE_SIZE; i++) {
        weight_history[i] = 0.0;
      }
      preferences.putLong("zero_offset", zero_offset);
      preferences.putFloat("correction", correction_offset);
      Serial.println("Tare completed and saved!");
    }
    else if (cmd == 'F' || cmd == 'f') {
      fastResponseMode = !fastResponseMode;
      Serial.print("Fast response mode: ");
      Serial.println(fastResponseMode ? "ON" : "OFF");
    }
    else if (cmd == 'S') {
      STABILITY_THRESHOLD += 5.0;
      Serial.print("Stability threshold increased to: ");
      Serial.println(STABILITY_THRESHOLD);
      preferences.putFloat("stab_thresh", STABILITY_THRESHOLD);
    }
    else if (cmd == 's') {
      STABILITY_THRESHOLD = max(1.0, STABILITY_THRESHOLD - 5.0);
      Serial.print("Stability threshold decreased to: ");
      Serial.println(STABILITY_THRESHOLD);
      preferences.putFloat("stab_thresh", STABILITY_THRESHOLD);
    }
    else if (cmd == 'N') {
      NOISE_THRESHOLD += 1.0;
      Serial.print("Noise threshold increased to: ");
      Serial.println(NOISE_THRESHOLD);
      preferences.putFloat("noise_thresh", NOISE_THRESHOLD);
    }
    else if (cmd == 'n') {
      NOISE_THRESHOLD = max(0.5, NOISE_THRESHOLD - 1.0);
      Serial.print("Noise threshold decreased to: ");
      Serial.println(NOISE_THRESHOLD);
      preferences.putFloat("noise_thresh", NOISE_THRESHOLD);
    }
    else if (cmd == 'D' || cmd == 'd') {
      Serial.println("\n=== Debug Information ===");
      Serial.print("Device connected: "); Serial.println(deviceConnected ? "YES" : "NO");
      Serial.print("Zero offset: "); Serial.println(zero_offset);
      Serial.print("Calibration factor: "); Serial.println(calibration_factor);
      Serial.print("Correction offset: "); Serial.println(correction_offset);
      Serial.print("Noise threshold: "); Serial.println(NOISE_THRESHOLD);
      Serial.print("Stability threshold: "); Serial.println(STABILITY_THRESHOLD);
      Serial.print("Fast response mode: "); Serial.println(fastResponseMode ? "ON" : "OFF");
      Serial.println("========================");
    }
  }
  
  // Read HX711 and update BLE characteristic if connected
  if (scale.is_ready()) {
    long raw = scale.read();
    float raw_weight = (zero_offset - raw) / calibration_factor - correction_offset;
    float filtered_weight = calculateMovingAverage(raw_weight);
    float display_weight = (abs(filtered_weight) < NOISE_THRESHOLD) ? 0.0 : filtered_weight;
    float display_weight_lbs = display_weight / 453.592;
    
    String stability;
    if (display_weight == 0.0) {
      if (abs(filtered_weight) < NOISE_THRESHOLD * 0.5)
        stability = "Stable";
      else
        stability = isStable() ? "Stable" : "Unstable";
    } else {
      stability = isStable() ? "Stable" : "Unstable";
    }
    
    // Only print every few readings to reduce serial traffic
    static int printCounter = 0;
    if (++printCounter >= 3) {
      printCounter = 0;
      Serial.print("Weight: ");
      Serial.print(display_weight, 1);
      Serial.print(" g / ");
      Serial.print(display_weight_lbs, 3);
      Serial.print(" lbs  [");
      Serial.print(stability);
      Serial.println("]");
    }
    
    // Send BLE notification if connected and enough time has passed
    if (deviceConnected && (millis() - lastNotifyTime >= minNotifyInterval)) {
      String weightStr = String((int)display_weight);
      pWeightCharacteristic->setValue(weightStr.c_str());
      pWeightCharacteristic->notify();
      lastNotifyTime = millis();
    }
  } else {
    Serial.println("HX711 not ready");
    delay(500);
  }
  
  // Handle BLE connection state changes
  if (!deviceConnected && oldDeviceConnected) {
    // Disconnected
    delay(500); // Give the bluetooth stack time to get ready
    Serial.println("Restarting advertising after disconnect...");
    BLEDevice::startAdvertising();
    oldDeviceConnected = deviceConnected;
  }
  
  if (deviceConnected && !oldDeviceConnected) {
    // Connected
    Serial.println("Device connected, ready to send weight data!");
    oldDeviceConnected = deviceConnected;
  }
  
  // Delay depends on fastResponseMode
  delay(fastResponseMode ? 200 : 300);
}
